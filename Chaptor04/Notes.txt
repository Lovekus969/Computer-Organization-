Chapter 4 â€” The Memory Hierarchy: Locality and Performance
ðŸ”¹ 4.1 Principle of Locality

Definition:
Most programs do not access all memory locations equally. They tend to access certain areas repeatedly.
This is called the Principle of Locality â€” and it helps in designing faster memory systems.

Types of Locality:
            Temporal Locality (Time-based):
                  Recently accessed data is likely to be accessed again soon.
                  Example: A loop variable i accessed repeatedly in a for loop.
            
            Spatial Locality (Space-based):
                  Data close to recently accessed addresses are likely to be accessed soon.
                  Example: Accessing array elements sequentially (arr[0], arr[1], arr[2]).      
      
      ðŸ§© Cache memory is built to take advantage of these two kinds of locality.

4.2 Characteristics of Memory Systems
            Every memory system is described by:


            | Property          | Description                              |
| ----------------- | ---------------------------------------- |
| **Access Time**   | Time to read/write a word                |
| **Cycle Time**    | Minimum time between successive accesses |
| **Transfer Rate** | Amount of data transferred per second    |
| **Capacity**      | Total storage available                  |
| **Cost per Bit**  | Price for storing each bit               |
| **Volatility**    | Whether data is lost when power is off   |

4.3 The Memory Hierarchy
                        The memory hierarchy balances speed, cost, and capacity

            | Level | Type                            | Speed     | Cost      | Size       |
            | ----- | ------------------------------- | --------- | --------- | ---------- |
            | 1     | **Registers**                   | Fastest   | Very High | Few bytes  |
            | 2     | **Cache (L1, L2, L3)**          | Very Fast | High      | MBs        |
            | 3     | **Main Memory (RAM)**           | Medium    | Moderate  | GBs        |
            | 4     | **Secondary Storage (SSD/HDD)** | Slow      | Low       | TBs        |
            | 5     | **Tertiary (Cloud, Tape)**      | Slowest   | Lowest    | Very large |


Concept:
When CPU needs data:
            It first checks cache (fastest).
            If not found â†’ goes to RAM (slower).
            If not in RAM â†’ goes to disk (slowest).


4.3.1 Cost and Performance Characteristics

            Registers: very fast but small
            Cache: fast, expensive, medium-sized
            Main Memory (RAM): slower, cheaper
            Disk Storage: very slow, cheap, large capacity

 Key Idea: Use small, fast memory near the CPU to store data thatâ€™s used often â€” thatâ€™s cache memory.

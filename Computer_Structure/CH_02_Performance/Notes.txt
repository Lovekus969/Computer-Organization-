Designing for Performance
1. What is Performance?
    Performance = how fast a computer executes programs.
  Higher performance = less time to complete a task.

Often measured by:
  Response Time (Latency): Time taken to finish one task.

Measuring Performance

Execution Time (T):

`````````````````````𝑇  =(Instruction Count) ×(CPI)× (Clock Cycle Time)
                     T=(Instruction Count)×(CPI)×(Clock Cycle Time)

            Instruction Count (IC): How many instructions a program needs.
            CPI (Cycles per Instruction): Average cycles per instruction.
            Clock Cycle Time: Inverse of clock rate (1 / frequency).

	​
Improving Performance

To make a computer faster, you can:
			Increase Clock Rate (GHz): Faster cycles → faster CPU.
			⚠ But leads to heating and power issues.
			Reduce CPI: Optimize hardware (pipelining, parallelism, better instruction design).
			Reduce Instruction Count (IC): Compiler optimizations, efficient ISA.

4. Benchmarks

Standard programs used to compare systems (e.g., SPEC benchmarks).Real workloads are better indicators than synthetic ones.
